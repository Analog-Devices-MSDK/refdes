name: MAXREFDES178

on:
  push:
    branches-ignore: [master]
  pull_request:
    branches-ignore: [master]

jobs:
  build_firmware:
    name: Build Firmware
    runs-on: windows-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          
      - name: Checkout Maxim SDK
        uses: actions/checkout@v2
        with:
          repository: Maxim-Integrated-Software-Public/maxim-sdk-windows-actions
          path: MaximSDK
          lfs: 'true'

      - name: Prepare Maxim Toolchain and SDK
        run: |
          cd MaximSDK
          7z x Tools.7z
          7z x Libraries.7z
          
      - name: Get Version Info
        run: |
          # This block parses version.h file in source code for version info.
          
          $VERSION_MAJOR_LINE=Get-Content maxrefdes178\maxrefdes178_common\maxrefdes178_version.h | Select-String -Pattern VERSION_MAJOR
          $VERSION_MAJOR=$VERSION_MAJOR_LINE.Line.Split(' ')[-1] 
          
          $VERSION_MINOR_LINE=Get-Content maxrefdes178\maxrefdes178_common\maxrefdes178_version.h | Select-String -Pattern VERSION_MINOR
          $VERSION_MINOR=$VERSION_MINOR_LINE.Line.Split(' ')[-1]
          
          $VERSION= -join($VERSION_MAJOR, ".", $VERSION_MINOR, ".", ${{github.run_number}})
          "VERSION=$VERSION" | Add-Content $env:GITHUB_ENV
          
      - name: Set Build Info
        run: |
          # This block generates build info header file to include from source code.
          
          $BUILD_TIMESTAMP = Get-Date -Format "yyyyMMddHHmm"
          
          @"
          /* AUTOGENERATED, DO NOT EDIT */
          
          #ifndef _BUILD_INFO_H_
          #define _BUILD_INFO_H_
          
          #define S_BUILD_NUMBER ${{github.run_number}}
          #define S_BUILD_TYPE "${env:BUILD_TYPE}"
          #define S_BUILD_MACHINE "${env:computername}"
          #define S_BUILD_SCM_REVISION "${{github.sha}}"
          #define S_BUILD_TIMESTAMP "${BUILD_TIMESTAMP}"
          
          #endif /* _BUILD_INFO_H_ */
          
          "@ | Out-File -Encoding ASCII -filepath maxrefdes178\maxrefdes178_common\maxrefdes178_build_info.h
          (Get-Content maxrefdes178\maxrefdes178_common\maxrefdes178_build_info.h -Raw).Replace("`n","`r`n") | Set-Content maxrefdes178\maxrefdes178_common\maxrefdes178_build_info.h -Force
          
      - name: Build MAX78000 Video Firmware
        run: |
          @"
          cd "${{github.workspace}}"
          export MAXIM_PATH="${{github.workspace}}\MaximSDK"
          export FIRMWARE_PATH="`$MAXIM_PATH\Libraries"
          export TOOLCHAIN_PATH="`$MAXIM_PATH\Tools"
          export PATH="`$TOOLCHAIN_PATH\GNUTools\bin;`$TOOLCHAIN_PATH\MinGW\msys\1.0\bin;`$PATH"
          
          echo "*-*-*-*-*-* BUILD STARTED -*-*-*-*-*-"
          cd "maxrefdes178\maxrefdes178_max78000_video"
          make -r -j
          if [ `$? -ne 0 ]; then
            echo "BUILD IS FAILED!"
          exit -1
          fi
          echo "*-*-*-*-*-* BUILD FINISHED -*-*-*-*-*-"
          
          "@ | Out-File -Encoding ASCII -filepath run_build.sh
          $env:Path += ";${{github.workspace}}\MaximSDK\Tools\GNUTools\bin"
          ${{github.workspace}}\MaximSDK\Tools\MinGW\msys\1.0\bin\sh --login -i ${{github.workspace}}\run_build.sh
          if (!$?) {
            exit -1
          }
          
      - name: Build MAX78000 Audio Firmware
        run: |
          @"
          cd "${{github.workspace}}"
          export MAXIM_PATH="${{github.workspace}}\MaximSDK"
          export FIRMWARE_PATH="`$MAXIM_PATH\Libraries"
          export TOOLCHAIN_PATH="`$MAXIM_PATH\Tools"
          export PATH="`$TOOLCHAIN_PATH\GNUTools\bin;`$TOOLCHAIN_PATH\MinGW\msys\1.0\bin;`$PATH"
          
          echo "*-*-*-*-*-* BUILD STARTED -*-*-*-*-*-"
          cd "maxrefdes178\maxrefdes178_max78000_audio"
          make -r -j
          if [ `$? -ne 0 ]; then
            echo "BUILD IS FAILED!"
          exit -1
          fi
          echo "*-*-*-*-*-* BUILD FINISHED -*-*-*-*-*-"
          
          "@ | Out-File -Encoding ASCII -filepath run_build.sh
          $env:Path += ";${{github.workspace}}\MaximSDK\Tools\GNUTools\bin"
          ${{github.workspace}}\MaximSDK\Tools\MinGW\msys\1.0\bin\sh --login -i ${{github.workspace}}\run_build.sh
          if (!$?) {
            exit -1
          }
          
#      - name: Build MAX32666 Bootloader
#        run: |
#          @"
#          cd "${{github.workspace}}"
#          export MAXIM_PATH="${{github.workspace}}\MaximSDK"
#          export FIRMWARE_PATH="`$MAXIM_PATH\Libraries"
#          export TOOLCHAIN_PATH="`$MAXIM_PATH\Tools"
#          export PATH="`$TOOLCHAIN_PATH\GNUTools\bin;`$TOOLCHAIN_PATH\MinGW\msys\1.0\bin;`$PATH"
#          
#          echo "*-*-*-*-*-* BUILD STARTED -*-*-*-*-*-"
#          cd "maxrefdes178\maxrefdes178_max32666_bootloader"
#          make -r -j
#          if [ `$? -ne 0 ]; then
#            echo "BUILD IS FAILED!"
#          exit -1
#          fi
#          echo "*-*-*-*-*-* BUILD FINISHED -*-*-*-*-*-"
#          
#          "@ | Out-File -Encoding ASCII -filepath run_build.sh
#          $env:Path += ";${{github.workspace}}\MaximSDK\Tools\GNUTools\bin"
#          ${{github.workspace}}\MaximSDK\Tools\MinGW\msys\1.0\bin\sh --login -i ${{github.workspace}}\run_build.sh
#          if (!$?) {
#            exit -1
#          }
          
      - name: Build MAX32666 Firmware
        run: |
          @"
          cd "${{github.workspace}}"
          export MAXIM_PATH="${{github.workspace}}\MaximSDK"
          export FIRMWARE_PATH="`$MAXIM_PATH\Libraries"
          export TOOLCHAIN_PATH="`$MAXIM_PATH\Tools"
          export PATH="`$TOOLCHAIN_PATH\GNUTools\bin;`$TOOLCHAIN_PATH\MinGW\msys\1.0\bin;`$PATH"
          
          echo "*-*-*-*-*-* BUILD STARTED -*-*-*-*-*-"
          cd "maxrefdes178\maxrefdes178_max32666"
          make -r -j
          make -r -j
          if [ `$? -ne 0 ]; then
            echo "BUILD IS FAILED!"
          exit -1
          fi
          echo "*-*-*-*-*-* BUILD FINISHED -*-*-*-*-*-"
          
          "@ | Out-File -Encoding ASCII -filepath run_build.sh
          $env:Path += ";${{github.workspace}}\MaximSDK\Tools\GNUTools\bin"
          ${{github.workspace}}\MaximSDK\Tools\MinGW\msys\1.0\bin\sh --login -i ${{github.workspace}}\run_build.sh
          if (!$?) {
            exit -1
          }
          
      - name: Prepare Release
        run: |
          # VERSION environment variable must be set before.
          
          mkdir maxrefdes178\release
          
          mv maxrefdes178\maxrefdes178_max78000_video\build\maxrefdes178_max78000_video.bin maxrefdes178\release\maxrefdes178_max78000_video_v${env:VERSION}.bin
          mv maxrefdes178\maxrefdes178_max78000_audio\build\maxrefdes178_max78000_audio.bin maxrefdes178\release\maxrefdes178_max78000_audio_v${env:VERSION}.bin
          # mv maxrefdes178\maxrefdes178_max32666_bootloader\build\maxrefdes178_max32666_bootloader.bin maxrefdes178\release\maxrefdes178_max32666_bootloader_v${env:VERSION}.bin
          mv maxrefdes178\maxrefdes178_max32666\build\maxrefdes178_max32666.bin maxrefdes178\release\maxrefdes178_max32666_v${env:VERSION}.bin
                              
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: maxrefdes178_firmware_v${{env.VERSION}}
          path: maxrefdes178/release/**
          
  build_android:
    name: Build Android App
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          
      - name: Get Version Info
        run: |
          # This block parses version.h file in source code for version info.
          
          VERSION_MAJOR=$(awk '/VERSION_MAJOR/ {print $3}' maxrefdes178/maxrefdes178_common/maxrefdes178_version.h | tr -d '\r') 
          VERSION_MINOR=$(awk '/VERSION_MINOR/ {print $3}' maxrefdes178/maxrefdes178_common/maxrefdes178_version.h | tr -d '\r')
          VERSION="${VERSION_MAJOR}.${VERSION_MINOR}.${{github.run_number}}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
      - name: Set Build Info
        run: |
          # This block generates build info header file to include from source code.
                    
          cat >maxrefdes178/maxrefdes178_common/maxrefdes178_build_info.h<<EOF
          /* AUTOGENERATED, DO NOT EDIT */
          #ifndef _BUILD_INFO_H_
          #define _BUILD_INFO_H_
          #define S_BUILD_NUMBER ${{github.run_number}}
          #define S_BUILD_TYPE "${BUILD_TYPE}"
          #define S_BUILD_MACHINE "$(hostname)"
          #define S_BUILD_SCM_REVISION "${{github.sha}}"
          #define S_BUILD_TIMESTAMP "$(date +%Y%m%d%H%M)"
          #endif /* _BUILD_INFO_H_ */
          EOF
          
      - name: Pre Build Android
        run: |
          echo "chaquopy.license=${{ secrets.MAXREFDES178_CHAQUOPY_LICENSE }}" >> maxrefdes178/maxrefdes178_android/local.properties 
          
      - name: Build Android Application
        uses: eskatos/gradle-command-action@v1.3.3
        with:
          build-root-directory: maxrefdes178/maxrefdes178_android
          wrapper-directory: maxrefdes178/maxrefdes178_android
          arguments: app::assembleRelease --no-daemon
          gradle-version: wrapper
          wrapper-cache-enabled: true
          dependencies-cache-enabled: true
          configuration-cache-enabled: true
          
      - name: Sign Android Application
        uses: r0adkll/sign-android-release@v1
        # ID used to access action output
        id: sign_app
        with:
          releaseDirectory: maxrefdes178/maxrefdes178_android/app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.MAXREFDES178_SIGNING_KEY }}
          alias: ${{ secrets.MAXREFDES178_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.MAXREFDES178_KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.MAXREFDES178_KEY_PASSWORD }}
          
      - name: Prepare Release
        run: |
          mkdir maxrefdes178/release
          
          mv ${{steps.sign_app.outputs.signedReleaseFile}} maxrefdes178/release/maxrefdes178_android_v${VERSION}.apk
          # mv app/build/outputs/apk/debug/app-debug.apk release/maxrefdes178_android_debug_v${VERSION}.apk
          
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: maxrefdes178_android_v${{env.VERSION}}
          path: maxrefdes178/release/**
          
